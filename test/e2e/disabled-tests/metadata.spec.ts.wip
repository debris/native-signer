// Copyright 2015-2020 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

import {
	EthereumNetworkKeys,
	SUBSTRATE_NETWORK_LIST,
	SubstrateNetworkKeys
} from 'constants/networkSpecs';
import {
	launchWithScanRequest,
	pinCode,
	tapBack,
	testExist,
	testRecoverIdentity,
	testScrollAndTap,
	testTap,
	testUnlockPin,
	testVisible
} from 'e2e/utils';
import { ScanTestRequest } from 'e2e/mockScanRequests';
import testIDs from 'e2e/testIDs';

async function openWestendNetworkSettingsMetadata(): Promise<void> {
	await testTap(testIDs.IdentitiesSwitch.toggleButton); //Open menu on top
	await testTap(testIDs.IdentitiesSwitch.networkSettings); //Select network settings
	await testScrollAndTap(
		testIDs.NetworkSettings.networkCard +
			'0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e',
		testIDs.NetworkSettings.networkSettingsScreen
	); //Select Westend
	await testScrollAndTap(
		testIDs.NetworkDetails.manageValidMetadata,
		testIDs.NetworkDetails.networkDetailsScreen
	); //manage metadata button
}

describe('Metadata management test', async () => {
	testRecoverIdentity();

	it('download metadata from raptor sequence', async () => {
		await tapBack();
		await openWestendNetworkSettingsMetadata();
		await testTap(testIDs.MetadataManagement.scannerButton); //Select scanner for injection
		//Check output
		//Accept metadata
	});

	it('select downloaded metadata', async () => {
		await openWestendNetworkSettingsMetadata();
		//Select new metadata
	});

	it('transaction parsed with new metadata', async () => {
		//Start app with transaction request injection
		//Tap scanner
		//Check that something is rendered
	});

	it('protect used metadata from removal', async () => {
		await openWestendNetworkSettingsMetadata();
		//tap on delete
		//Select new metadata
		//Admire rejection
	});

	it('remove metadata', async () => {
		await openWestendNetworkSettingsMetadata();
		/*		await testTap //delete entries
		await testTap //select old metadata
		await testTap //manage metadata again
		await //test that it was removed*/
	});
});
